package org.dcm4che3.conf.core.tests.adapters;

import java.util.HashMap;
import java.util.Map;

import org.dcm4che3.conf.core.adapters.ReflectiveAdapter.PropertySchema;

/**
 * Builder class for testing property schemas generated by the production cod.
 */
public class PropertySchemaBuilder {
    
    private final String propertyName;
    private final Map<String, Object> propertySchema = new HashMap<>();

    /**
     * Creates a new {@link PropertySchemaBuilder} for the specified property name and type.
     * 
     * @param propertyName the name of the property.
     * @param type the type of the property.
     */
    public PropertySchemaBuilder(String propertyName, String type) {
    
        this.propertyName = propertyName;
        
        propertySchema.put(PropertySchema.TITLE_KEY, propertyName);
        propertySchema.put(PropertySchema.TYPE_KEY, type);
        
        // Required is pretty much always there other than storage version.
        propertySchema.put(PropertySchema.REQUIRED_KEY, false);
        propertySchema.put(PropertySchema.UI_GROUP_KEY, "Other");
    }

    public String getPropertyName() {
        
        return propertyName;
    }

    /**
     * Sets the title value of the property for schema.
     * 
     * @param title the desired title of the property.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withTitle(String title) {
        
        propertySchema.put(PropertySchema.TITLE_KEY, title);
        
        return this;
    }
    
    /**
     * Removes the title of the property from schema.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withoutTitle() {
        
        propertySchema.remove(PropertySchema.TITLE_KEY);
        
        return this;
    }

    /**
     * Sets the read-only value of the property for schema.
     * 
     * @param readOnly the desired read-only value of the property.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withReadOnly(boolean readOnly) {
        
        propertySchema.put(PropertySchema.READONLY_KEY, readOnly);
        
        return this;
    }

    /**
     * Sets the required value of the property for schema.
     * 
     * @param required the desired required value of the property.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withRequired(boolean required) {
        
        propertySchema.put(PropertySchema.REQUIRED_KEY, required);
        
        return this;
    }
    
    /**
     * Removes the required value of the property from schema.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withoutRequired() {

        propertySchema.remove(PropertySchema.REQUIRED_KEY);
        
        return this;
    }
    
    /**
     * Sets the group value of the property for schema.
     * 
     * @param group the desired group value of the property.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withGroup(String group) {
        
        propertySchema.put(PropertySchema.UI_GROUP_KEY, group);
        
        return this;
    }
    
    /**
     * Sets the order value of the property for schema.
     * 
     * @param order the desired order value of the property.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder withOrder(int order) {
        
        propertySchema.put(PropertySchema.UI_ORDER_KEY, order);
        
        return this;
    }

    /**
     * Sets one (any) additional property schema value.
     * 
     * @param key the property schema key.
     * @param value the property schema value.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder with(String key, Object value) {

        propertySchema.put(key, value);
        
        return this;
    }
    
    /**
     * Sets more than one (any) additional property schema values.
     * 
     * @param mappings the property schema key-value pairs.
     * 
     * @return this {@link PropertySchemaBuilder} instance.
     */
    public PropertySchemaBuilder with(Map<String, Object> mappings) {

        propertySchema.putAll(mappings);
        
        return this;
    }
    
    /**
     * Builds the property schema with the specified values.
     * 
     * @return the property schema map.
     */
    public Map<String, Object> build() {
        
        return propertySchema;
    }
}
